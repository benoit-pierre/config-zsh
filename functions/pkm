
# Package management.

_pkm_cmd=''
_pkm_dryrun=0
_pkm_verbose=0
_pkm_manager=''

case "`lsb_release -i -s | tr A-Z a-z`" in
  arch)
    _pkm_manager='pac'
    ;;
  linuxmint|ubuntu)
    _pkm_manager='apt'
    ;;
esac

typeset -g -A _pkm_aliases
_pkm_aliases=(           \
  h    help              \
  c    clean             \
  ca   clean-all         \
  ff   find-file         \
  ffu  find-file-update  \
  i    install           \
  if   install-file      \
  l    list              \
  lb   list-big          \
  li   list-installed    \
  q    query             \
  r    remove            \
  ra   remove-auto       \
  s    search            \
  u    update            \
  uf   update-fast       \
  )

_pkm-help()
{
  cat <<EOF
usage:  pkm
operations:
    c    clean                             :  clean old packages cache
    ca   clean-all                         :  clean all packages cache
    ff   find-file           <pattern>     :  find package containing file
    ffu  find-file-update                  :  update repo files lists
    h    help                              :  show this help
    i    install             <package(s)>  :  install package(s)
    if   install-file        <file(s)>     :  install package(s) from file(s)
    l    list                <package(s)>  :  list package contents
    lb   list-big            [count]       :  list big packages
    li   list-installed                    :  list installed packages
    q    query               [package(s)]  :  query package information
    r    remove              [package(s)]  :  remove package
    ra   remove-auto                       :  remove unused packages
    s    search              [package(s)]  :  search for a package
    u    update                            :  update repos and upgrade packages
    u    update-fast                       :  upgrade packages
EOF

  return 1
}

# Helpers. {{{

_pkm-msg()
{
  notify-send --expire-time=10000 -- 'pkm' "${(F)@}"
}

_pkm-err()
{
  echo 1>&2 "$@"
}

_pkm-exec-cmd()
{
  if [[ 0 -ne $_pkm_dryrun || 0 -ne $_pkm_verbose ]]
  then
    _pkm-err "$@"
    [[ 0 -ne $_pkm_dryrun ]] && return 0
  fi

  "$@"
}

_pkm-sudo-cmd()
{
  _pkm-exec-cmd sudo "$@"
}

_pkm-check-cmd()
{
  _pkm_cmd="${_pkm_aliases[$1]:-${1:-help}}"
  [[ $# -gt 0 ]] && shift

  case "$_pkm_cmd" in
    clean|clean-all|find-file-update|remove-auto|update|update-fast)
      [[ $# -eq 0 ]]
      ;;
    find-file|search)
      [[ $# -eq 1 ]]
      ;;
    help)
      _pkm-help "$@"
      return $?
      ;;
    install|install-file|list|query|remove)
      [[ $# -ge 1 ]]
      ;;
    list-big)
      [[ $# -le 1 ]]
      ;;
    list-installed)
      [[ $# -ge 0 ]]
      ;;
    *)
      _pkm-err "no such command: $_pkm_cmd"
      return 1
      ;;
  esac
}

# }}}

# Completion. {{{

_pkm-complete-all-packages()
{
  _arguments -s : \
    "*:package:$_pkm_complete_all_packages" \
    && ret=0
}

_pkm-complete-package-files()
{
  _arguments -s : \
    - recur '*:directory:_path_files -/' \
    - nonrecur "*:package:$_pkm_complete_package_files" \
    && ret=0
}

_pkm-complete-installed-packages()
{
  _arguments -s : \
    "*:package:$_pkm_complete_installed_packages" \
    && ret=0
}

_pkm-complete-nothing()
{
  _message 'no more arguments'
}

_pkm-complete-count()
{
  _arguments \
  '2::count:' \
    && ret=0
}

_pkm-complete-pattern()
{
  _arguments \
  '2::pattern:' \
    && ret=0
}

_pkm-complete-search-text()
{
  _arguments \
  '2:search text:' \
    && ret=0
}

_pkm-complete()
{
  _pkm_complete_all_packages=''
  _pkm_complete_package_files=''
  _pkm_complete_installed_packages=''

  if [[ 'pkm' = "$service" ]]
  then
    service="pkm-$_pkm_manager"
  fi

  case "$service" in

    pkm-apt)
      _pkm_complete_all_packages='_deb_packages avail'
      _pkm_complete_package_files='_path_files -g "*.deb(-.)"'
      _pkm_complete_installed_packages='_deb_packages installed'
      ;;

    pkm-pac)

      _pacman_completions_all_packages() {
        local -a cmd packages repositories packages_long

        packages=( $(_call_program packages pacman -Sql) )
        typeset -U packages
        _wanted packages expl "packages" compadd - "${(@)packages}"

        repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
        typeset -U repositories
        _wanted repo_packages expl "repository/package" compadd -S "/" $repositories
      }

      _pacman_completions_installed_packages() {
        local -a cmd packages packages_long
        packages_long=(/var/lib/pacman/local/*(/))
        packages=( ${${packages_long#/var/lib/pacman/local/}%-*-*} )
        compadd "$@" -a packages
      }

      _pkm_complete_all_packages='_pacman_completions_all_packages'
      _pkm_complete_package_files='_path_files -g "*.pkg.tar*~*.sig(.,@)"'
      _pkm_complete_installed_packages='_pacman_completions_installed_packages'

      ;;

    *)
      _message "Error: invalid service: $service"
      return
      ;;
  esac

  local curcontext=$curcontext state state_descr
  typeset -A opt_args

  _arguments -C \
    '1:command:->command' \
    '*: :->argument' \

  case "$state" in

    command)

      local -A commands

      commands=(
      {c,clean}':clean old packages cache'
      {ca,clean-all}':clean all packages cache'
      {ff,find-file}':find package containing file'
      {ffu,find-file-update}':update repo files lists'
      {h,help}':show help'
      {i,install}':install package'
      {if,install-file}':install package from file'
      {l,list}':list package contents'
      {lb,list-big}':list big packages'
      {li,list-installed}':list installed packages'
      {q,query}':query package information'
      {r,remove}':remove package'
      {ra,remove-auto}':remove unused packages'
      {s,search}':search for a package'
      {u,update}':update repos and upgrade packages'
      {uf,update-fast}':upgrade packages'
      )

      _describe -t commands 'commands' commands

      ;;

    argument)

      local cmd="${_pkm_aliases[$words[2]]:-$words[2]}" cpl

      case "$cmd" in
        --help|clean|clean-all|find-file-update|remove-auto|update|update-fast)
          cpl=nothing
          ;;
        find-file)
          cpl=pattern
          ;;
        search)
          cpl=search-text
          ;;
        install)
          cpl=all-packages
          ;;
        install-file)
          cpl=package-files
          ;;
        list|list-installed|query|remove)
          cpl=installed-packages
          ;;
        list-big)
          cpl=count
          ;;
        *)
          cpl=nothing
          ;;
      esac

      _call_function ret "_pkm-complete-$cpl"

      ;;

  esac
}

compdef _pkm-complete pkm
compdef _pkm-complete pkm-apt
compdef _pkm-complete pkm-pac

# }}}

# APT. {{{

pkm-apt()
{
  _pkm-check-cmd "$@" || return $?
  shift

  case "$_pkm_cmd" in
    clean)
      _pkm-sudo-cmd apt-get autoclean
      ;;
    clean-all)
      _pkm-sudo-cmd apt-get clean
      ;;
    find-file)
      _pkm-exec-cmd apt-file search -- "$1"
      ;;
    find-file-update)
      _pkm-sudo-cmd apt-file update
      ;;
    install)
      _pkm-sudo-cmd apt-get --verbose-versions install -- "$@"
      ;;
    install-file)
      _pkm-sudo-cmd dpkg --install -- "$@"
      ;;
    list)
      _pkm-exec-cmd dpkg --listfiles -- "$@"
      ;;
    list-big)
      _pkm-exec-cmd dpigs --human-readable --lines="${1:-$(($LINES-1))}" | tac
      ;;
    list-installed)
      if [[ -t 1 ]]
      then
        fmt='${db:Status-Abbrev} '"${bold_color}"'${Package}'"${reset_color} ${fg_bold[green]}"'${Version}'"${reset_color}"'\n'
      else
        fmt='${db:Status-Abbrev} ${Package} ${Version}\n'
      fi
      _pkm-exec-cmd dpkg-query --show --showformat="$fmt" -- "$@" | sed -n 's/^.i. //p'
      ;;
    query)
      _pkm-exec-cmd apt-cache show -- "$@"
      ;;
    remove)
      _pkm-sudo-cmd apt-get --auto-remove remove -- "$@"
      ;;
    remove-auto)
      _pkm-sudo-cmd apt-get autoremove
      ;;
    search)
      _pkm-exec-cmd apt-cache search -- "$1"
      ;;
    update)
      _pkm-sudo-cmd apt-get update && _pkm-sudo-cmd apt-get --verbose-versions dist-upgrade
      ;;
    update-fast)
      _pkm-sudo-cmd apt-get --verbose-versions dist-upgrade
      ;;
    *)
      return 1
  esac
}

# }}}

# Pacman. {{{

pkm-pac()
{
  _pkm-check-cmd "$@" || return $?
  shift

  case "$_pkm_cmd" in
    clean)
      _pkm-sudo-cmd pacman --sync --clean
      ;;
    clean-all)
      _pkm-sudo-cmd pacman --sync --clean --clean
      ;;
    find-file)
      _pkm-exec-cmd pkgfile --glob --verbose -- "*$1*"
      ;;
    find-file-update)
      _pkm-sudo-cmd pkgfile --update
      ;;
    install)
      _pkm-sudo-cmd pacman --sync -- "$@"
      ;;
    install-file)
      _pkm-sudo-cmd pacman --upgrade -- "$@"
      ;;
    list)
      _pkm-exec-cmd pacman --query --list -- "$@"
      ;;
    list-big)
      _pkm-exec-cmd expac -H M "%-11m %-40n %-$(($COLUMNS-(11+1+40+1)))d" | sort -n | tail --lines="${1:-$(($LINES-1))}"
      ;;
    list-installed)
      _pkm-exec-cmd pacman --query -- "$@"
      ;;
    query)
      _pkm-exec-cmd pacman --sync --info -- "$@"
      ;;
    remove)
      _pkm-sudo-cmd pacman --remove --cascade --recursive -- "$@"
      ;;
    remove-auto)
      local -a packages
      packages=( $(pacman --query --deps --quiet --unrequired) )
      if [[ 0 -ne $#packages ]]
      then
        _pkm-sudo-cmd pacman --remove --recursive -- $packages
      fi
      ;;
    search)
      _pkm-exec-cmd pacman --sync --search -- "$1"
      ;;
    update)
      _pkm-sudo-cmd pacman --sync --refresh --sysupgrade
      ;;
    update-fast)
      _pkm-sudo-cmd pacman --sync --sysupgrade
      ;;
    *)
      return 1
  esac
}

# }}}

pkm()
{
  "pkm-$_pkm_manager" "$@"
}

# vim: ft=zsh foldmethod=marker foldlevel=0
